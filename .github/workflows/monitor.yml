import requests
import pandas as pd
import json
import os
from io import StringIO
from datetime import datetime

# --- CONFIGURACI√ìN ---
URL = "https://naves.dpworldcallao.com.pe/programacion/"
NTFY_TOPIC = "cambios-naves-zim-9w3x5z"
DATA_FILE = "etb_data.json"

# MEJORA 1: Define cu√°ntas horas debe cambiar el ETB para que se considere "significativo"
ETB_CHANGE_THRESHOLD_HOURS = 2

# Lista de campos que queremos monitorear
CAMPOS_A_MONITOREAR = ["ETB", "MANIFEST", "ATA", "ETD", "ATD"]

# --- FUNCIONES AUXILIARES ---

def cargar_datos_viejos():
    """Carga los datos guardados en la √∫ltima ejecuci√≥n."""
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def guardar_datos_nuevos(data):
    """Guarda los datos actuales para la pr√≥xima comparaci√≥n."""
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=4)

def enviar_notificacion(titulo, mensaje, tags="shipping_container"):
    """Env√≠a una notificaci√≥n push a tu celular v√≠a ntfy.sh."""
    try:
        # MEJORA 3: Se a√±ade el header "Markdown: yes" para permitir enlaces
        requests.post(
            f"https://ntfy.sh/{NTFY_TOPIC}",
            data=mensaje.encode('utf-8'),
            headers={
                "Title": titulo.encode('utf-8'),
                "Tags": tags,
                "Markdown": "yes"
            }
        )
        print(f"Notificaci√≥n enviada: {titulo}")
    except Exception as e:
        print(f"Error al enviar notificaci√≥n: {e}")

def get_tracking_link(vessel_name):
    """MEJORA 3: Crea un enlace de b√∫squeda en MarineTraffic para la nave."""
    # Reemplaza espacios con %20 para que la URL funcione correctamente
    query_name = vessel_name.replace(' ', '%20')
    return f"https://www.marinetraffic.com/en/ais/index/search/all?keyword={query_name}"

# --- L√ìGICA PRINCIPAL ---

def revisar_cambios():
    """Compara los datos actuales con los viejos y notifica si hay cambios."""
    print("Iniciando revisi√≥n de cambios en naves ZIM...")
    datos_viejos = cargar_datos_viejos()
    datos_nuevos = {}
    
    try:
        df = obtener_tabla_naves()
        if df is None: return

        df_zim = df[df['LINE'].str.strip() == 'ZIM'].copy()
        print(f"Se encontraron {len(df_zim)} naves de ZIM.")

        if df_zim.empty:
            guardar_datos_nuevos({})
            # Verificar si antes hab√≠a naves y ahora no (todas desaparecieron)
            if datos_viejos:
                enviar_notificacion("Todas las naves ZIM han sido removidas", "Ya no hay naves ZIM en la programaci√≥n.", tags="wastebasket")
            return

        # Procesar naves actuales y detectar cambios o adiciones
        for index, nave in df_zim.iterrows():
            nombre_nave = nave['VESSEL NAME']
            ib_vyg = nave['I/B VYG']
            clave_viaje = f"{nombre_nave}-{ib_vyg}"
            
            # Almacenar datos actuales
            datos_nuevos[clave_viaje] = {campo: pd.Series(nave.get(campo, '---')).fillna('---').iloc[0] for campo in CAMPOS_A_MONITOREAR}

            tracking_link = get_tracking_link(nombre_nave)
            mensaje_link = f"\n\n[Rastrear en MarineTraffic]({tracking_link})"

            if clave_viaje not in datos_viejos:
                titulo = f"üö¢ Nueva Nave ZIM: {nombre_nave}"
                mensaje = f"Se a√±adi√≥ la nave {nombre_nave} ({ib_vyg}) a la programaci√≥n." + mensaje_link
                enviar_notificacion(titulo, mensaje, tags="heavy_plus_sign")
            else:
                for campo in CAMPOS_A_MONITOREAR:
                    valor_nuevo = datos_nuevos[clave_viaje].get(campo, '---')
                    valor_viejo = datos_viejos[clave_viaje].get(campo, '---')
                    
                    if valor_nuevo != valor_viejo:
                        mensaje_base = f"Campo '{campo}' ha cambiado.\nAnterior: {valor_viejo}\nNuevo: {valor_nuevo}" + mensaje_link
                        titulo = f"‚ö†Ô∏è Alerta de Cambio: {nombre_nave}"

                        # MEJORA 1: L√≥gica para Alertas ETB Inteligentes
                        if campo == "ETB":
                            try:
                                formato_fecha = '%d-%m-%Y %H:%M:%S'
                                fecha_vieja = datetime.strptime(valor_viejo, formato_fecha)
                                fecha_nueva = datetime.strptime(valor_nuevo, formato_fecha)
                                diferencia_horas = abs((fecha_nueva - fecha_vieja).total_seconds() / 3600)
                                
                                if diferencia_horas > ETB_CHANGE_THRESHOLD_HOURS:
                                    titulo = f"‚ÄºÔ∏è ALERTA MAYOR: {nombre_nave}"
                                    mensaje = f"Cambio significativo de {diferencia_horas:.1f} horas en ETB.\nAnterior: {valor_viejo}\nNuevo: {valor_nuevo}" + mensaje_link
                                    enviar_notificacion(titulo, mensaje, tags="rotating_light")
                                else:
                                    print(f"Cambio menor de ETB para {nombre_nave} ignorado ({diferencia_horas:.1f} horas).")
                            except ValueError:
                                # Si las fechas no se pueden procesar, env√≠a una alerta normal
                                enviar_notificacion(titulo, mensaje_base, tags="warning")
                        else:
                            # Para otros campos (ATA, MANIFEST, etc.) notificar siempre
                            enviar_notificacion(titulo, mensaje_base, tags="warning")

        # MEJORA 2: Detectar naves que desaparecieron de la lista
        naves_desaparecidas = set(datos_viejos.keys()) - set(datos_nuevos.keys())
        for clave_viaje in naves_desaparecidas:
            nombre_nave_desaparecida = clave_viaje.split('-')[0]
            titulo = f"üóëÔ∏è Nave Removida: {nombre_nave_desaparecida}"
            mensaje = f"La nave {nombre_nave_desaparecida} ha sido eliminada de la programaci√≥n."
            enviar_notificacion(titulo, mensaje, tags="wastebasket")
            
        guardar_datos_nuevos(datos_nuevos)
        print("Revisi√≥n de cambios completada.")

    except Exception as e:
        print(f"Error al procesar la revisi√≥n de cambios: {e}")
        enviar_notificacion("‚ÄºÔ∏è Error en Script de Naves", f"El script fall√≥ con el error: {e}", tags="x")

def enviar_resumen_diario():
    print("Generando resumen diario...")
    try:
        df = obtener_tabla_naves()
        if df is None: return

        df_zim = df[df['LINE'].str.strip() == 'ZIM'].copy()
        print(f"Se encontraron {len(df_zim)} naves para el resumen.")

        if df_zim.empty:
            enviar_notificacion("Resumen Diario de Naves", "No hay naves de ZIM en la programaci√≥n de hoy.", tags="date")
            return

        mensaje_resumen = ""
        for index, nave in df_zim.iterrows():
            nombre_nave = nave.get('VESSEL NAME', 'N/A')
            etb = pd.Series(nave.get('ETB', '---')).fillna('---').iloc[0]
            etd = pd.Series(nave.get('ETD', '---')).fillna('---').iloc[0]
            tracking_link = get_tracking_link(nombre_nave)
            
            mensaje_resumen += f"\n**{nombre_nave}**\nETB: {etb}\nETD: {etd}\n[Rastrear]({tracking_link})\n"

        titulo = "Resumen Diario de Naves ZIM"
        enviar_notificacion(titulo, mensaje_resumen.strip(), tags="newspaper")
        print("Resumen diario enviado.")
    except Exception as e:
        print(f"Error al enviar el resumen diario: {e}")
        enviar_notificacion("‚ÄºÔ∏è Error en Resumen Diario", f"Fall√≥ con el error: {e}", tags="x")

def obtener_tabla_naves():
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(URL, headers=headers, timeout=15)
        response.raise_for_status()
        
        all_tables = pd.read_html(StringIO(response.text), attrs={'id': 'tabla-naves'})
        return all_tables[0]
    except Exception as e:
        print(f"Error al obtener la tabla de la web: {e}")
        enviar_notificacion("‚ÄºÔ∏è Error en Script de Naves", f"No se pudo descargar la tabla de DP World. Error: {e}", tags="x")
        return None

if __name__ == "__main__":
    job_type = os.getenv('JOB_TYPE', 'REGULAR_CHECK')
    if job_type == 'DAILY_SUMMARY':
        enviar_resumen_diario()
    else:
        revisar_cambios()
